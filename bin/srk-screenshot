#!/usr/bin/env -S qjs --std

const SCREENSHOTS_DIR = "$HOME/Pictures/Screenshots"

function main(args) {
    const [command] = args;
    if (!commands[command]) commands.help();
    else commands[command]();
}

const hotkeys = [
    ['Print', 'Full to file'],
    ['Shift+Print', 'Area to file'],
    ['Ctrl+Print', 'Full to clipboard'],
    ['Ctrl+Shift+Print', 'Area to clipboard'],
]

const commands = {
    help() {
        console.log('Available commands:')
        Object.keys(commands).forEach(c => console.log(` ${c}`));
    },
    hotkeys() {
        os.exec(['zenity', '--info', '--no-wrap', '--title=Screenshot Shortcuts', '--text',
            hotkeys.map(h => `${h[0]} -> ${h[1]}`).join('\n')])
    },
    full_to_file() {
        ensureScreenshotsDirectory();
        const fileName = bashEval(`printf "%s" "full-$(date +"%Y-%m-%d_%H-%M-%S").png"`);
        run(`maim "${SCREENSHOTS_DIR}/${fileName}"`);
        notify(`Saved full screenshot to ${fileName}`);
    },
    area_to_file() {
        ensureScreenshotsDirectory();
        const fileName = bashEval(`printf "%s" "area-$(date +"%Y-%m-%d_%H-%M-%S").png"`);
        run(`maim --select "${SCREENSHOTS_DIR}/${fileName}"`);
        notify(`Saved area screenshot to ${fileName}`);
    },
    full_to_clipboard() {
        run(`set -euo pipefail && maim | xclip -selection clipboard -t image/png`);
        notify(`Full screenshot send to clipboard`);
    },
    area_to_clipboard() {
        run(`set -euo pipefail && maim --select | xclip -selection clipboard -t image/png`);
        notify(`Area screenshot send to clipboard`);
    }
}

const ensureScreenshotsDirectory = () => run(`mkdir -p "${SCREENSHOTS_DIR}"`);
const notify = (msg) => os.exec(['notify-send', msg]);
const run = (command) => {
    const exitCode = os.exec(['bash', '-c', command]);
    if (exitCode > 0) throw new Error(`Command \`${command}\` returned with exit code ${exitCode}`);
}
function bashEval(command) {
    const [output_read, output_write] = os.pipe()
    os.exec(['bash', '-c', command], { stdout: output_write })
    os.close(output_write)
    return std.fdopen(output_read, 'r').readAsString();
}

main(scriptArgs.splice(1))
